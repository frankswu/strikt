{
  "ownKey": "home",
  "ownPages": [
    {
      "reference": {
        "path": "",
        "baseUrl": "https://strikt.io",
        "fileName": "",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://strikt.io"
      },
      "description": "",
      "title": "Strikt",
      "content": "\n<section class=\"columns is-centered\">\n  <div class=\"column is-half\">\n    <figure class=\"image\">\n      <img src=\"https://strikt.io/assets/images/logo.png\" alt=\"Strikt logo\">\n    <\/figure>\n  <\/div>\n<\/section>\n\n<section class=\"columns is-centered\">\n  <div class=\"column is-half\">\n    <a class=\"is-block has-text-centered\" href=\"https://strikt.io/changelog\">Version 0.28.0<\/a>\n  <\/div>\n<\/section>\n\n<section class=\"columns is-centered\">\n  <div class=\"column is-8\">\n    <div class=\"content is-medium\">\n      <p>\n        Strikt is an assertion library for Kotlin intended for use with a test runner such as <a\n        href=\"https://junit.org/junit5/\">JUnit<\/a> or <a href=\"http://spekframework.org/\">Spek<\/a>.\n      <\/p>\n      <p>Strikt gives you\u2026<\/p>\n    <\/div>\n  <\/div>\n<\/section>\n\n\n<section class=\"columns is-multiline is-gapless\">\n  <header class=\"column is-4 has-text-right-tablet\">\n    <div class=\"notification content is-medium\">\n      <h2 class=\"title is-4\">A powerful fluent API<\/h2>\n    <\/div>\n  <\/header>\n  <div class=\"column is-8 is-hidden-mobile\">\n    <div class=\"notification is-dark\"><\/div>\n  <\/div>\n\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      Type-safe fluent assertions\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val subject = \"The Enlightened take things Lightly\"\nexpectThat(subject)\n  .hasLength(35)\n  .matches(Regex(\"[\\\\w\\\\s]+\"))\n  .startsWith(\"T\")\n<\/code><\/pre>\n    <\/div>\n  \n\n<\/section>\n\n<section class=\"columns is-multiline is-gapless\">\n  <header class=\"column is-4 has-text-right-tablet\">\n    <div class=\"notification content is-medium\">\n      <h2 class=\"title is-4\">Collection handling<\/h2>\n    <\/div>\n  <\/header>\n  <div class=\"column is-8 is-hidden-mobile\">\n    <div class=\"notification is-dark\"><\/div>\n  <\/div>\n\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      Flexible assertions about collections\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val subject = listOf(\"Eris\", \"Thor\", \"Anubis\", \"Ra\")\nexpectThat(subject)\n  .contains(\"Eris\", \"Thor\", \"Anubis\")\n<\/code><\/pre>\n    <\/div>\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      \u201cNarrow\u201d the assertion to elements or ranges\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">expectThat(subject)[0].isEqualTo(\"Eris\")\n<\/code><\/pre>\n    <\/div>\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      Make grouping assertions\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val subject = Deity.values().map { it.toString() }\nexpectThat(subject)\n  .isNotEmpty()\n  .any { startsWith(\"E\") }\n<\/code><\/pre>\n    <\/div>\n  \n\n<\/section>\n\n<section class=\"columns is-multiline is-gapless\">\n  <header class=\"column is-4 has-text-right-tablet\">\n    <div class=\"notification content is-medium\">\n      <h2 class=\"title is-4\">\u201cSoft\u201d assertions<\/h2>\n    <\/div>\n  <\/header>\n  <div class=\"column is-8 is-hidden-mobile\">\n    <div class=\"notification is-dark\"><\/div>\n  <\/div>\n\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      Use lambdas to execute multiple assertions on a subject at once\u2026\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val subject = \"The Enlightened take things Lightly\"\nexpectThat(subject) {\n  hasLength(5)           // fails\n  matches(Regex(\"\\\\d+\")) // fails\n  startsWith(\"T\")        // still evaluated and passes\n}\n<\/code><\/pre>\n    <\/div>\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      \u2026with structured diagnostics of those that fail\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-text\">▼ Expect that \"The Enlightened take things Lightly\":\n  ✗ has length 5\n         found 35\n  ✗ matches the regular expression /\\d+/\n                             found \"The Enlightened take things Lightly\"\n  ✓ starts with \"T\"\n<\/code><\/pre>\n    <\/div>\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      Use lambdas to execute assertions on multiple subjects at once\u2026\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val person1 = Person(name = \"David\")\nval person2 = Person(name = \"Ziggy\")\nexpect {\n  that(person1.name).isEqualTo(\"David\")\n  that(person2.name).isEqualTo(\"Ziggy\")\n}\n<\/code><\/pre>\n    <\/div>\n  \n\n<\/section>\n\n<section class=\"columns is-multiline is-gapless\">\n  <header class=\"column is-4 has-text-right-tablet\">\n    <div class=\"notification content is-medium\">\n      <h2 class=\"title is-4\">Strong typing<\/h2>\n    <\/div>\n  <\/header>\n  <div class=\"column is-8 is-hidden-mobile\">\n    <div class=\"notification is-dark\"><\/div>\n  <\/div>\n\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      Assertion functions can &quot;narrow&quot; the type of the assertion\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val subject: Any? = \"The Enlightened take things Lightly\"\nexpectThat(subject) // type: Assertion<Any?>\n  .isNotNull()      // type: Assertion<Any>\n  .isA<String>()    // type: Assertion<String>\n  .matches(Regex(\"[\\\\w\\\\s]+\"))\n// only available on Assertion<CharSequence>\n<\/code><\/pre>\n    <\/div>\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      Assertions can &quot;map&quot; to properties and method results in a type safe way:\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val subject = Pantheon.NORSE\nexpectThat(subject)\n  .get(Pantheon::ruler) // reference to a property\n  .get { toString() }   // return type of a method call\n  .isEqualTo(\"Odin\")\n<\/code><\/pre>\n    <\/div>\n  \n\n<\/section>\n\n<section class=\"columns is-multiline is-gapless\">\n  <header class=\"column is-4 has-text-right-tablet\">\n    <div class=\"notification content is-medium\">\n      <h2 class=\"title is-4\">Extensibility<\/h2>\n    <\/div>\n  <\/header>\n  <div class=\"column is-8 is-hidden-mobile\">\n    <div class=\"notification is-dark\"><\/div>\n  <\/div>\n\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      Custom assertions are extension functions\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">fun Assertion.Builder<LocalDate>.isStTibsDay() =\n  assert(\"is St. Tib's Day\") {\n    when (MonthDay.from(it)) {\n      MonthDay.of(2, 29) -> pass()\n      else -> fail()\n    }\n  }\nexpectThat(LocalDate.of(2020, 2, 29)).isStTibsDay()\n<\/code><\/pre>\n    <\/div>\n  \n    <div class=\"column is-4 has-text-right-tablet\">\n      <div class=\"notification content is-medium\">\n      Custom mappings are extension properties\n      <\/div>\n    <\/div>\n    <div class=\"column is-8\">\n      <pre class=\"notification content is-medium is-dark\"><code class=\"language-kotlin\">val Assertion.Builder<Pantheon>.realm: Assertion.Builder<String>\n  get() = get { \"$ruler to $underworldRuler\" }\nval subject = Pantheon.NORSE\nexpectThat(subject)\n  .realm\n  .isEqualTo(\"Odin to Hel\")\n<\/code><\/pre>\n    <\/div>\n  \n\n<\/section>\n\n"
    },
    {
      "reference": {
        "path": "",
        "baseUrl": "https://strikt.io",
        "fileName": "404",
        "extension": "html",
        "usePrettyUrl": false,
        "link": "https://strikt.io/404.html"
      },
      "description": "",
      "title": "Not Found",
      "content": ""
    }
  ]
}